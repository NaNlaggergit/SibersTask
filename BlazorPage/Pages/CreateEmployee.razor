@page "/create-employee"
@using System.ComponentModel.DataAnnotations
@using BlazorPage.Models
@inject HttpClient Http
<h3>Создание сотрудника</h3>

<EditForm Model="@employee" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="firstName" class="form-label">Имя</label>
        <InputText id="firstName" class="form-control" @bind-Value="employee.FirstName" />
        <ValidationMessage For="@(() => employee.FirstName)" />
    </div>

    <div class="mb-3">
        <label for="lastName" class="form-label">Фамилия</label>
        <InputText id="lastName" class="form-control" @bind-Value="employee.LastName" />
        <ValidationMessage For="@(() => employee.LastName)" />
    </div>

    <div class="mb-3">
        <label for="middleName" class="form-label">Отчество</label>
        <InputText id="middleName" class="form-control" @bind-Value="employee.MiddleName" />
        <ValidationMessage For="@(() => employee.MiddleName)" />
    </div>

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" class="form-control" @bind-Value="employee.Email" />
        <ValidationMessage For="@(() => employee.Email)" />
    </div>

    <button type="submit" class="btn btn-primary">Создать сотрудника</button>
</EditForm>

@if (successMessage != null)
{
    <div class="alert alert-success mt-3">@successMessage</div>
}

@code {
    private EmployeeModel employee = new();
    private string? successMessage;

    private async Task HandleValidSubmit()
    {
        var response = await Http.PostAsJsonAsync("api/employee", employee);

        if (response.IsSuccessStatusCode)
        {
            successMessage = "Сотрудник успешно создан!";
            employee = new(); // если нужно очистить форму
        }
        else
        {
            successMessage = $"Ошибка при создании сотрудника: {response.ReasonPhrase}";
        }
    }
}